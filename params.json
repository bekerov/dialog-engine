{
  "name": "Dialog Engine",
  "tagline": "The aim of the project is to implement a dialog system, which answers the users queries related to product information.",
  "body": "# Dialog Engine for Product Information\r\nThe implementation of this project for has been divided into the following modules:\r\n* Crawling and scraping the product information from **Flipkart**.\r\n* Processing the scraped data.\r\n* Saving the data in **MongoDB** (NoSql database).\r\n* Preprocessing the query.\r\n* Querying the database and extracting the relevant results.\r\n\r\n# Live Application\r\nYou can find the live application hosted [here](https://dialog-engine.herokuapp.com/ \"Permalink to Dialog Engine for Product Information\").\r\n\r\n## Crawling, Scraping & Processing\r\nThe tools used were **Scrapy** and **BeautifulSoup** for crawling the data from Flipkart's website. The categories that were scraped are **mobiles, televisions, laptops, air conditioners, refrigerators** and **cameras**. The amount of data that was extracted was around 3000 products from the above mentioned categories.   \r\n**BeautifulSoup** is a python library used for extracting data from the HTML or XML pages.\r\n\r\n## Data Representation\r\n**MongoDB** is a NoSql database used for storing big data with a lot of flexibility.   \r\nWe maintain different collections for different categories of products. Ex: Mobiles and TV's of electronics are stored in different collections, which will be advantageous while querying, once the category is known we can search in the corresponding collection.   \r\nThe primary key of each document in **MongoDB** is the **model name**.\r\n\r\n## Query Processing\r\nWe have handled two type of property based queries:\r\n* Template Based Query\r\n* Natural Language Based Query\r\n* Comparison Based Query\r\n\r\n## Approach\r\n* We maintain three lists namely - **product name list**, **brand name list** and **property list**.\r\n* We extract the brand of the product from the given query by iterating through the brand name list using **edit distance algorithm** which also helps in handling spelling errors or typos.\r\n* Elements of product_name list are tuples of **size 3** \\- brand, model name and category.\r\n* After the extraction of the brand name, we consider only those products from that particular brand for further processing.\r\n* For determining the exact model name and the property name, we use a similar approach but add an additional **similarity measure** along with the edit distance as mentioned before.\r\n* The second similarity measure is calculated by dividing the maximum length of the two strings by the number of character matches between the strings.\r\n* We take the **harmonic mean** of the **edit distance score** and the **above metric** to get a final similarity measure.\r\n* We take the **Top 10 results** for products and the **best one** for property.\r\n* For every product name from the top 10, we query the database and obtain respective results and display to the user.\r\n\r\n## Tags\r\n**\\#IIIT-H \\#IRE \\#Major_Project \\#Information_Retrieval_and_Extraction_Course \\#Dialog_Engine \\#Flipkart \\#NLP \\#StopWordDetection \\#Tokeniser \\#Tokenisation \\#Keywords_Identification \\#Crawling \\#Scraping \\#Python \\#MongoDB \\#BeatifulSoup \\#Scrapy**",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}